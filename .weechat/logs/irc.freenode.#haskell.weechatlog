2014-04-08 15:36:43	-->	jackhxs (~jackhxs@206-80-0-91.static.twtelecom.net) has joined #haskell
2014-04-08 15:36:43	--	Topic for #haskell is "http://www.haskell.org/ | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D http://ircbrowse.net/day/haskell/today?mode=recent | Administrative issues: #haskell-ops | Hackage down? http://hdiff.luite.com | XCode 5 issues? http://is.gd/H4sEub | Need an op? Try: @where ops"
2014-04-08 15:36:43	--	Topic set by johnw (~johnw@c-69-245-200-160.hsd1.il.comcast.net) on Mon, 17 Feb 2014 18:32:10
2014-04-08 15:36:43	--	Channel #haskell: 1230 nicks (2 ops, 0 voices, 1228 normals)
2014-04-08 15:36:43	--	URL for #haskell: http://www.haskell.org/
2014-04-08 15:36:44	--	Mode #haskell [+CLcnptz]
2014-04-08 15:36:44	--	Channel created on Sat, 25 Nov 2006 22:42:48
2014-04-08 15:36:56	athan	c_wraith: So runID returns a new type (possibly non-concrete)?
2014-04-08 15:37:01	<--	pvt_petey (~pvt_petey@host-89-240-213-208.as13285.net) has quit (Max SendQ exceeded)
2014-04-08 15:37:02	haasn	eitan: Are you thinking of the DefaultSuperclassInstances proposal? https://ghc.haskell.org/trac/ghc/wiki/DefaultSuperclassInstances
2014-04-08 15:37:13	athan	(just for my own clearity, I know it's not the purpose of this tutorial)
2014-04-08 15:37:23	<--	Tobani (~gregors@99-9-225-70.lightspeed.iplsin.sbcglobal.net) has quit (Ping timeout: 246 seconds)
2014-04-08 15:37:26	-->	Platz (~Platz@unaffiliated/platz) has joined #haskell
2014-04-08 15:37:37	c_wraith	athan: no, runId is the destructor.  It strips the newtype constructor away, returning a polymorphic function
2014-04-08 15:37:48	athan	hmm okay
2014-04-08 15:38:03	<--	[swift]_ (~swift@75-101-60-167.dsl.static.sonic.net) has quit (Ping timeout: 250 seconds)
2014-04-08 15:38:21	c_wraith	athan: to go the other direction, you'd have something like:  toId :: a -> Id a ; toId x = ....  you figure this out.  :)
2014-04-08 15:38:33	haasn	eitan: It describes an example of where there's a semantic difference between a derived-from-Monad Applicative and a manual Applicative instance, by the way
